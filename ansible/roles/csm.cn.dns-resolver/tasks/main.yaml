#
# MIT License
#
# (C) Copyright 2022-2024 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# resolver config tasks
---
- block:
  - name: Slurp in /etc/resolv.conf to get any DHCP added entries
    slurp:
      src: "/etc/resolv.conf"
    register: resolv_conf

  - name: Register /etc/resolv.conf contents
    set_fact:
      resolv: "{{ resolv_conf.content | b64decode }}"

  - name: Parse existing options from /etc/resolv.conf
    set_fact:
      node_existing_options: "{{ resolv | regex_findall( 'options (\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3})\\b') }}"

  - name: Slurp in /etc/sysconfig/network/config to get any DHCP added entries
    slurp:
      src: "/etc/sysconfig/network/config"
    register: net_config

  - name: Register /etc/sysconfig/network/config contents
    set_fact:
      netconf: "{{ net_config.content | b64decode }}"

  - name: Parse options from config list
    set_fact:
      node_netconf_options: "{{ item.split() }}"
    loop: "{{ netconf | default() | regex_findall( 'NETCONFIG_DNS_RESOLVER_OPTIONS=\"(.*)\"') }}"

  - name: Add existing options to node_netconf_options
    set_fact:
      node_netconf_options: "{{ node_netconf_options + [ item ] }}"
    when: (node_existing_options is defined) and (item not in node_netconf_options)
    loop: "{{ node_existing_options }}"

  - name: Add required options to node_netconf_options
    set_fact:
      node_netconf_options: "{{ node_netconf_options + [ item ] }}"
    when: item not in node_netconf_options
    loop: "{{ node_required_dns_options }}"

  - name: Add any customer defined options to node_netconf_options
    set_fact:
      node_netconf_options: "{{ node_netconf_options + [ item ] }}"
    when: item not in node_netconf_options
    loop: "{{ node_external_dns_options }}"

  - name: Set DNS_RESOLVER_OPTIONS entries
    when: node_netconf_options is defined
    lineinfile:
      dest: /etc/sysconfig/network/config
      regex: '^NETCONFIG_DNS_RESOLVER_OPTIONS=\"(.*)\"$'
      line: "NETCONFIG_DNS_RESOLVER_OPTIONS=\"{{ node_netconf_options | join(' ') }}\""
      backrefs: yes

  - name: Get NMN Services Network info from SLS
    local_action:
      module: uri
      url: "http://cray-sls/v1/search/networks?name={{ nmn_svcs_name }}"
      method: GET
    register: nmnlb
    failed_when: nmnlb.status != 200
    run_once: true
    when: gcp_environment == true

  - name: Get NMN DNS
    set_fact:
      nmnlb_dns: "{{ nmnlb | json_query('json[0].ExtraProperties.Subnets[0].IPReservations[?Name==`unbound`].IPAddress | [0]') }}"
    when: gcp_environment == true

  - name: Add gcp DNS config
    replace:
      path: /etc/sysconfig/network/config
      regexp: 'NETCONFIG_DNS_STATIC_SERVERS=.*'
      replace: 'NETCONFIG_DNS_STATIC_SERVERS="{{ nmnlb_dns }}"'
    when: gcp_environment == true

  - name: Regenerate /etc/resolv.conf
    shell: netconfig update -f
    changed_when: result.rc == 0
    failed_when: result.rc != 0
    register: result

# Copyright 2021 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# (MIT License)

---
- include_role:
    name: csm.ncn.download_utils
- include_role:
    name: csm.ncn.standardize_hostnames

- name: Get management NCNs from SLS
  delegate_to: localhost
  run_once: true
  uri:
    url: "{{ sls_url }}/v1/search/hardware?extra_properties.Role=Management"
    headers:
      Authorization: "{{ authorization_header }}"
  register: management_ncn_payload

- name: Get xname for target NCN
  set_fact:
    xname: "{{ management_ncn_payload.json | json_query(json_query) | first }}"
  vars:
    json_query: '[?contains(ExtraProperties.Aliases, `{{ target_hostname }}`)].Xname'

- name: Get last endpoint access times for NCN from BSS
  delegate_to: localhost
  uri:
    url: "{{ bss_url }}/boot/v1/endpoint-history?name={{ xname }}"
    headers:
      Authorization: "{{ authorization_header }}"
  register: starting_access_times

- name: Register first bootscript access time
  set_fact:
    bootscript_first_access: "{{ starting_access_times.json | json_query(bootscript_json_query) | first | default(0) }}"

- name: Register first user-data access time
  set_fact:
    userdata_first_access: "{{ starting_access_times.json | json_query(userdata_json_query) | first | default(0) }}"

- name: Wait for {{ target_hostname }} to request bootscript
  delegate_to: localhost
  uri:
    url: "{{ bss_url }}/boot/v1/endpoint-history?name={{ xname }}"
    headers:
      Authorization: "{{ authorization_header }}"
  register: latest_access_times
  until: (latest_access_times.json | json_query(bootscript_json_query) | first | default(0) | int) >
    (bootscript_first_access | int)
  retries: "{{ wait_for_retries }}"
  delay: "{{ wait_for_delay }}"

- name: Wait for {{ target_hostname }} to request cloud-init user-data
  delegate_to: localhost
  uri:
    url: "{{ bss_url }}/boot/v1/endpoint-history?name={{ xname }}"
    headers:
      Authorization: "{{ authorization_header }}"
  register: latest_access_times
  until: (latest_access_times.json | json_query(userdata_json_query) | first | default(0) | int) >
    (userdata_first_access | int)
  retries: "{{ wait_for_retries }}"
  delay: "{{ wait_for_delay }}"

- name: Wait for {{ target_hostname }} to be a member in Kubernetes
  delegate_to: localhost
  environment:
    SLS_BASE_URL: "{{ sls_url }}"
    BSS_BASE_URL: "{{ bss_url }}"
    HSM_BASE_URL: "{{ hsm_url }}"
    TOKEN: "{{ token }}"
  command: csi automate ncn kubernetes --action is-member --ncn "{{ target_hostname }}"
    --kubeconfig "{{ kubeconfig_file }}"
  register: is_member_output
  until:
    - is_member_output.rc == 0
  retries: "{{ wait_for_retries }}"
  delay: "{{ wait_for_delay }}"

- name: Wait for baremetal etcd to be healthy
  delegate_to: localhost
  environment:
    SLS_BASE_URL: "{{ sls_url }}"
    BSS_BASE_URL: "{{ bss_url }}"
    HSM_BASE_URL: "{{ hsm_url }}"
    TOKEN: "{{ token }}"
  command: csi automate ncn etcd --action is-healthy --kubeconfig "{{ kubeconfig_file }}"
  register: etcd_health_output
  until:
    - etcd_health_output.rc == 0
  retries: "{{ wait_for_retries }}"
  delay: "{{ wait_for_delay }}"

- name: Set BSS meta-data for {{ target_hostname }} to disable disk wiping
  delegate_to: localhost
  environment:
    SLS_BASE_URL: "{{ sls_url }}"
    BSS_BASE_URL: "{{ bss_url }}"
    HSM_BASE_URL: "{{ hsm_url }}"
    TOKEN: "{{ token }}"
  command: csi handoff bss-update-param --set metal.no-wipe=1 --limit "{{ xname }}"

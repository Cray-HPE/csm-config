#!/usr/bin/env ansible-playbook
#
# MIT License
#
# (C) Copyright 2021-2025 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# This is a top level play for all NCNs that incorporates all 3 kinds of
# NCN (management, storage, worker) as well as their corresponding images.
# The three seperate top level plays are marked for deprecation via a debug
# notice.
---
- hosts:
   - Management_Master
   - Management_Worker
   - Management_Storage
  gather_facts: yes
  any_errors_fatal: true
  remote_user: root
  roles:
    - role: csm.ncn.sysctl
      vars:
        sysctl_set: "{{ false if cray_cfs_image else true|default(false)|bool }}"
    - role: trust-csm-ssh-keys
    - role: csm.ca_cert
    - role: passwordless-ssh
    - role: csm.password
      vars:
        password_username: 'root'
    - role: csm.ssh_keys
      vars:
        ssh_keys_username: 'root'
    - role: csm.ssh_config
      vars:
        ssh_config_username: 'root'
    - role: csm.ncn.pdsh

# Install packages and configure SAT on Kubernetes NCNs (masters and workers)
- hosts:
   - Management_Master
   - Management_Worker
  gather_facts: yes
  any_errors_fatal: true
  remote_user: root
  vars_files:
    - vars/csm_repos.yml
    - vars/csm_packages.yml
  roles:
    - role: csm.packages
      vars:
        packages: "{{ common_csm_sles_packages + common_mgmt_ncn_csm_sles_packages + k8s_mgmt_ncn_csm_sles_packages }}"
      when: ansible_distribution_file_variety == "SUSE"
    - role: csm.ncn.sat

# Install packages on Worker NCNs
- hosts:
   - Management_Worker
  gather_facts: yes
  any_errors_fatal: true
  remote_user: root
  vars_files:
    - vars/csm_repos.yml
    - vars/csm_packages.yml
  roles:
    - role: csm.packages
      vars:
        packages: "{{ k8s_worker_ncn_csm_sles_packages }}"
      when: ansible_distribution_file_variety == "SUSE"

# Install packages on storage NCNs
- hosts:
   - Management_Storage
  gather_facts: yes
  any_errors_fatal: true
  remote_user: root
  vars_files:
    - vars/csm_repos.yml
    - vars/csm_packages.yml
  roles:
    - role: csm.packages
      vars:
        packages: "{{ common_csm_sles_packages + common_mgmt_ncn_csm_sles_packages + storage_mgmt_ncn_csm_sles_packages }}"
      when: ansible_distribution_file_variety == "SUSE"

# This role runs on all the storage NCNs, but not their images.
# It starts the SMART service, and reconfigures and redeploys the running node-exporter
- hosts:
   - "Management_Storage:!cfs_image"
  gather_facts: yes
  any_errors_fatal: true
  remote_user: root
  roles:
    - role: csm.storage.smartmon

# This play runs on all worker NCNs, but not their images.
# It contains a pre_task which skips the play for a given worker
# if both of the following things are true:
# 1. The HSM group defined in the play (in the iscsi_group_name variable) exists.
# 2. The worker does not belong to that group.
#
# Personalize/ configure identified worker nodes for iSCSI SBPS (Scalable Boot
# Content Projection Service):
#   - provision these worker nodes as iSCSI targets with LIO services
#   - install/ enable SBPS Marshal Agent(systemd service) on these iSCSI targets
#   - create DNS SRV and A records to be used to discover iSCSI targets during compute nodes booting
#   - mount s3 bucket (boot-image) images using new dedicated s3 read only policy
#   - apply k8s label to the personalized nodes for other consumers of iSCSI SBPS

- hosts: Management_Worker:!cfs_image
  gather_facts: no
  any_errors_fatal: true
  remote_user: root
  vars:
    iscsi_group_name: "iscsi_worker"
  pre_tasks:
    # Skip this worker if the iSCSI HSM group exists and this host is not in it
    - name: Check if this worker should be skipped
      # end_host will skip the rest of THIS play, only for THIS host
      # Other hosts are not impacted
      # If there are additional plays in this playbook, they are not impacted.
      meta: end_host
      # {{groups}} is a variable containing all host groups. CFS creates a host group for every HSM group.
      # {{group_names}} is a list of host groups to which the current host belongs.
      when: (iscsi_group_name in groups) and (iscsi_group_name not in group_names)
  roles:
    # Apply k8s label on all the intended worker nodes
    - role: csm.sbps.apply_label
    # Enable spire for SBPS Marshal Agent (systemd service)
    - role: csm.sbps.enable_spire
    # Provision iSCSI targets/ LIO services
    - role: csm.sbps.lio_config
    # Install and enable SBPS Marshal Agent
    - role: csm.sbps.install_enable_marshal
    # Configure SBPS DNS "SRV" and "A" records
    - role: csm.sbps.dns_srv_records

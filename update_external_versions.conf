# All default values mentioned below are the defaults of the latest_versions tool. If a field
# is not specified, the update_external_versions tool simply does not pass that argument
# to the latest_versions tool. So in case of conflicting information, the defaults described
# in that tool are the ones you should follow.

# This file contains any number of stanzas of the following forms:

#########################################
# Form 1: Docker images and helm charts
#########################################
#
#image: image_name
#    major: major number
#    minor: minor number
#    outfile: target filename
#    server: arti or algol60
#    source: docker or helm
#    team: team name
#    type: build type
#    url: url of repository.catalog (for docker) or index.yaml (for helm)
#
# For each such stanza, the only required field is the image field. This field
# determines the name of the image whose latest version we wish to discover.
#
# The major and minor fields, if present, must contain nonnegative integers.
# If specified, they constrain the image version search to versions with the
# specified major and (if specified) minor number. If neither is specified, the
# overall latest version of the image will be sought.
#
# outfile defines the name of the file that the version will be written to.
# If not specified, it defaults to <image_name>.version
#
# server specifies whether the image search should be done on arti.dev or algol60.net
# If not specified, it defaults to algol60
#
# If source is not specified, it defaults to docker.
# If team is not specified, it defaults to csm.
#
# The source, team, and type fields specify where on the server the image search should be done.
#
################
# server: arti #
################
#
# For arti, if type is not specified, it defaults to stable
#
# For source docker, the image version will be based on the information found in:
# https://arti.dev.cray.com/artifactory/<team>-docker-<type>-local/repository.catalog
#
# For source helm, the image version will be based on the information found in:
# https://arti.dev.cray.com/artifactory/<team>-helm-<type>-local/index.yaml
#
###################
# server: algol60 #
###################
#
# For algol60, if type is not specified, it defaults to stable
#
# For source docker, the image version will be based on the information found in:
# https://artifactory.algol60.net/artifactory/<team>-docker/repository.catalog
#
# For source helm, the image version will be based on the information found in:
# https://artifactory.algol60.net/artifactory/<team>-helm-charts/index.yaml
#
# For algol60, the type field is used within these files to distinguish between
# stable and unstable images by looking at the path to the images.
#
#######
# url #
#######
#
# The url field is mutually exclusive with the following fields: server and team
# It allows you to instead point the tool directly to the file it should retrieve to
# use as its image index.
# For source docker, it will assume the file is in the same JSON format as the repository.catalog
# files found on arti.dev or algol60
# For source helm, it will assume the file is in the same YAML format as the index.yaml files
# found on arti.dev or algol60
# When the url field is used, there is no default type. Thus, if the specified file includes
# the image type in the file paths (like on algol60), the type must be explicitly specified or
# no images will be found. Alternatively, if the specified file does NOT include the image type
# in the file paths (like on arti.dev), the type parameter should be omitted entirely, otherwise
# no images will be found.

#########################################
# Form 2: RPMs
#########################################

#rpm:  RPM_name
#    major: major number
#    minor: minor number
#    outfile: target filename for version
#    namefile: target filename for RPM filename
#    urlfile: target filename for full URL to RPM
#    server: algol60
#    type: build type
#    uri: algol60 URI
#    url: custom URL
#    archstrip: true or false
#    arch: RPM arch
#
# For each such stanza, the only required field is the rpm field. This field
# determines the name of the image whose latest version we wish to discover.
#
# The major and minor fields, if present, must contain nonnegative integers.
# If specified, they constrain the RPM version search to versions with the
# specified major and (if specified) minor number. If neither is specified, the
# overall latest version of the RPM will be sought.
#
# If archstrip is true, then we filter for RPM filenames that end with
# .<arch>.rpm (e.g. .x86_64.rpm, .src.rpm, .noarch.rpm, etc), and that
# part of the filename will not be considered to be part of the version.
# archstrip defaults to true.
#
# arch specifies the architecture of the RPM, for the purposes of the archstrip
# field. If archstrip is false, this field may not be set. If archstrip is true,
# this field defaults to the name of the directory that contains the RPM in
# its URL path.
#
# outfile defines the name of the file that the version will be written to.
# If not specified, it defaults to <RPM_name>.version
#
# If namefile is specified, the filename of the RPM with this version will be 
# written to it. If unspecified, no such file is written.
#
# If urlfile is specified, the full URL to the RPM with this version will be
# written to it. If unspecified, no such file is written.
#
# If server is not specified and url is not specified, server defaults to algol60.
# The url field is mutually exclusive the with server, type, and uri fields.
#
# If the url field is specified:
#    * That custom URL is where the tool will look for RPM files
#
# If the server is algol60, then:
#    * If type is not specified, it defaults to stable
#    * The tool will look for the RPM files in https://artifactory.algol60.net/artifactory/csm-rpms/hpe/<type>/<uri>/

image: cf-gitea-import
    major: 1
    minor: 3

rpm: csm-ssh-keys-roles
    major: 1
    minor: 2
    urlfile: csm-ssh-keys-roles.rpm.url
    uri: sle-15sp2/csm-ssh-keys/noarch
